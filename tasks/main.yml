---
- name: install python and devel. packages for venv setup
  apt: name="{{ item }}"
  with_items: '{{ django_packages }}'
  become: true
  tags: superuser
  when: isnotdocker

- name: install python and devel. packages for venv setup
  apt: name="{{ item }}"
  remote_user: root
  with_items: '{{ django_packages }}'
  when: isdocker

- name: pull application from repo
  git:
    repo: "{{ git_repo }}"
    key_file: '{{ git_private_key }}'
    version: "{{ branch }}"
    accept_hostkey: True
    dest: "{{ app_path }}"
    recursive: yes
    force: yes
  register: git
  when: 
    - git_repo is defined
    - git_repo is not none
  notify: "reload app"
  tags: upgrade

- name: configure django settings
  template:
    src: "{{ django_settings_tpl }}"
    dest: "{{ django_settings_path }}"
  when: django_settings_tpl is defined
  notify: "reload app"
  tags: upgrade

- name: install virtualenv if not availible
  apt: name=virtualenv
  when: not '/usr/bin/virtualenv'|exists

- name: install newest pip
  pip: name=pip state=latest virtualenv='{{ venv_path }}'
       virtualenv_python='python{{ py_ver }}'

- name: configure venv
  pip:
    virtualenv: "{{ venv_path }}"
    virtualenv_python: 'python{{ py_ver }}'
    requirements: "{{ requirements_path }}"
  when: (git is defined and git.changed) or force_venv or git_repo is undefined
  tags: upgrade

- block:
  - name: run manage.py
    django_manage:
      command: "{{ item }}"
      app_path: "{{ app_path }}"
      virtualenv: "{{ venv_path }}"
    with_items: '{{ django_commands }}'
    when: (git is defined and git.changed) or force_manage or git_repo is undefined

  - name: load fixtures
    django_manage:
      command: loaddata
      app_path: "{{ app_path }}"
      virtualenv: "{{ venv_path }}"
      fixtures: "{{ django_fixtures|default([])|join(' ') }}"
    when: django_fixtures

  - name: create superusers
    django_manage:
      command: '
        createsuperuser --noinput
          {% if item.email is defined %}--email {{ item.email }}{% endif %}
          {% if item.username is defined %}--username {{ item.username }}{% endif %}
      '
      virtualenv: '{{ venv_path }}'
      app_path: '{{ app_path }}'
    with_items: '{{ django_admins }}'

  - name: install pexpect
    apt: name=python-pexpect
    become: true
    when: django_admins|length>0 or django_users|length>0
    tags: superuser

  - name: change passwords
    expect:
      chdir: '{{ app_path }}'
      command: '{{ venv_path }}/bin/python{{ py_ver }} manage.py changepassword {{ item.user }}'
      responses:
        Password: '{{ item.pass }}'
    with_items: '{{ django_admins|union(django_users) }}'

  ignore_errors: django_ignore_manage_erros
  environment:
    DJANGO_SETTINGS_MODULE: "{{ django_settings_module }}"
  tags: upgrade
